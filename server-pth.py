import socket
import threading
import sys
import signal
import logging
import os

# –§–∞–π–ª, –≥–¥–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è —Å–≤–µ–¥–µ–Ω–∏—è –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è—Ö
CLIENT_LOG = 'clients.log'

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ª–æ–≥–≥–µ—Ä–∞
logging.basicConfig(
    filename='activity.log',
    level=logging.INFO,
    format='%(asctime)s | %(levelname)s | %(message)s'
)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
is_running = True
is_paused = False
connections = []

def handle_connection(client_socket, client_address):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –æ–¥–Ω–∏–º –∫–ª–∏–µ–Ω—Ç–æ–º.
    """
    logging.info(f"–ù–æ–≤–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –æ—Ç {client_address}")
    with open(CLIENT_LOG, 'a') as f:
        f.write(f"–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: {client_address}\n")

    try:
        while True:
            payload = client_socket.recv(1024)
            if not payload:
                break
            message = payload.decode()
            logging.info(f"–ü–æ–ª—É—á–µ–Ω–æ –æ—Ç {client_address}: {message}")
            client_socket.send(payload)
    except ConnectionResetError:
        logging.warning(f"–û–±–æ—Ä–≤–∞–Ω–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å {client_address}")
    finally:
        client_socket.close()
        logging.info(f"–ö–ª–∏–µ–Ω—Ç {client_address} –æ—Ç–∫–ª—é—á—ë–Ω")

def accept_connections(server_socket):
    """
    –§–æ–Ω–æ–≤—ã–π —Ü–∏–∫–ª –ø—Ä–∏—ë–º–∞ –Ω–æ–≤—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π.
    """
    global is_running, is_paused

    while is_running:
        if is_paused:
            threading.Event().wait(1)
            continue
        try:
            conn, addr = server_socket.accept()
            thread = threading.Thread(target=handle_connection, args=(conn, addr))
            thread.start()
            connections.append(thread)
        except socket.timeout:
            continue
        except OSError:
            break

def run_server():
    global is_running, is_paused

    sock = socket.socket()
    sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
    sock.bind(('', 9090))
    sock.listen()
    sock.settimeout(1)

    print("üü¢ –°–µ—Ä–≤–µ—Ä –∞–∫—Ç–∏–≤–µ–Ω –∏ –∂–¥—ë—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...")
    logging.info("–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω.")

    acceptor = threading.Thread(target=accept_connections, args=(sock,))
    acceptor.start()

    try:
        while True:
            cmd = input("üí° –ö–æ–º–∞–Ω–¥–∞ (stop | pause | resume | logs | clear logs | clear clients): ").strip().lower()

            if cmd == "stop":
                print("‚õî –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞...")
                logging.info("–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.")
                is_running = False
                is_paused = False
                sock.close()
                break
            elif cmd == "pause":
                if not is_paused:
                    is_paused = True
                    print("‚è∏Ô∏è –ü—Ä–∏—ë–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
                    logging.info("–°–µ—Ä–≤–µ—Ä –ø–æ—Å—Ç–∞–≤–ª–µ–Ω –Ω–∞ –ø–∞—É–∑—É.")
                else:
                    print("‚ÑπÔ∏è –°–µ—Ä–≤–µ—Ä —É–∂–µ –Ω–∞ –ø–∞—É–∑–µ.")
            elif cmd == "resume":
                if is_paused:
                    is_paused = False
                    print("‚ñ∂Ô∏è –°–µ—Ä–≤–µ—Ä –≤–æ–∑–æ–±–Ω–æ–≤–∏–ª –ø—Ä–∏—ë–º.")
                    logging.info("–°–µ—Ä–≤–µ—Ä –≤–æ–∑–æ–±–Ω–æ–≤–∏–ª —Ä–∞–±–æ—Ç—É.")
                else:
                    print("‚ÑπÔ∏è –°–µ—Ä–≤–µ—Ä —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç.")
            elif cmd == "logs":
                if os.path.exists('activity.log'):
                    with open('activity.log', 'r') as log:
                        print("\nüìÑ –ñ—É—Ä–Ω–∞–ª –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:\n")
                        print(log.read())
                else:
                    print("‚ö†Ô∏è –õ–æ–≥-—Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            elif cmd == "clear logs":
                open('activity.log', 'w').close()
                print("üßπ –õ–æ–≥–∏ –æ—á–∏—â–µ–Ω—ã.")
                logging.info("–õ–æ–≥-—Ñ–∞–π–ª –æ—á–∏—â–µ–Ω –≤—Ä—É—á–Ω—É—é.")
            elif cmd == "clear clients":
                open(CLIENT_LOG, 'w').close()
                print("üßæ –°–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤ –æ—á–∏—â–µ–Ω.")
                logging.info("–°–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤ –æ—á–∏—â–µ–Ω.")
            else:
                print("‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.")
    except KeyboardInterrupt:
        print("\n‚õî –°–µ—Ä–≤–µ—Ä –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É (Ctrl+C).")
        logging.info("–ü—Ä–µ—Ä–≤–∞–Ω–æ –≤—Ä—É—á–Ω—É—é.")
        is_running = False
        is_paused = False
        sock.close()

    acceptor.join()
    for t in connections:
        t.join()

    print("üîö –°–µ—Ä–≤–µ—Ä –≤—ã–∫–ª—é—á–µ–Ω.")
    logging.info("–°–µ—Ä–≤–µ—Ä –≤—ã–∫–ª—é—á–µ–Ω.")

if __name__ == "__main__":
    run_server()
